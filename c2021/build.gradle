import com.diffplug.spotless.LineEnding

import java.nio.charset.StandardCharsets

plugins {
    id "application"
    id "java"
    id "com.github.johnrengelman.shadow"
    id "edu.wpi.first.GradleRIO"
    id "com.diffplug.spotless"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

application {
    mainClass.set("org.frcteam2910.c2021.Main")
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamOrDefault(2910)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    jarTask = shadowJar
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
    implementation project(":common:robot")
    implementation project(":vision-lib")

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled.set(true)
wpi.sim.addDriverstation()

// Configure jar and deploy tasks
wpi.java.configureExecutableTasks(shadowJar)
wpi.java.configureTestTasks(test)
wpi.java.debugJni.set(false)

spotless {
    java {
        target fileTree('src') {
            include "**/*.java"
        }
        toggleOffOn()

        setLineEndings(LineEnding.UNIX)
        setEncoding(StandardCharsets.UTF_8)
        eclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()

        importOrder('java', '', '\\#')
                .wildcardsLast()
        removeUnusedImports()
    }
}
